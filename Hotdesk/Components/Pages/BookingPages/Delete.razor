@page "/bookings/delete"
@using Microsoft.EntityFrameworkCore
@using Hotdesk.Models
@inject IDbContextFactory<Hotdesk.Data.HotdeskContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Booking</h2>
    <hr />
    @if (booking is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">DeskId</dt>
            <dd class="col-sm-10">@booking.DeskId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UserId</dt>
            <dd class="col-sm-10">@booking.UserId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UserName</dt>
            <dd class="col-sm-10">@booking.UserName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">BookingDate</dt>
            <dd class="col-sm-10">@booking.BookingDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">StartTime</dt>
            <dd class="col-sm-10">@booking.StartTime</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EndTime</dt>
            <dd class="col-sm-10">@booking.EndTime</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CheckedIn</dt>
            <dd class="col-sm-10">@booking.CheckedIn</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CheckInTime</dt>
            <dd class="col-sm-10">@booking.CheckInTime</dd>
        </dl>
        <EditForm method="post" Model="booking" OnValidSubmit="DeleteBooking" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(booking is null)">Delete</button> |
            <a href="/bookings">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Booking? booking;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        booking = await context.Booking.FirstOrDefaultAsync(m => m.Id == Id);

        if (booking is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteBooking()
    {
        using var context = DbFactory.CreateDbContext();
        context.Booking.Remove(booking!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/bookings");
    }
}
